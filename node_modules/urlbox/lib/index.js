'use strict';

var hmacSha1 = require('crypto-js/hmac-sha1');
var includes = require('lodash.includes');

var DEFAULT_PREFIX = 'https://api.urlbox.io/v1/';
var DEFAULT_OPTIONS = {
  format: 'png'
};

module.exports = function (key, secret) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_PREFIX;

  return {
    buildUrl: function buildUrl(options) {
      options = validateOptions(options);
      var query = toQueryString(options);
      var token = generateToken(query, secret);
      return '' + prefix + key + '/' + token + '/' + options.format + '?' + query;
    }
  };
};

var generateToken = function generateToken(queryString, secret) {
  return hmacSha1(queryString, secret);
};

var toQueryString = function toQueryString(options) {
  var vals = Object.keys(options).filter(function (key) {
    return !includes(['format'], key);
  }).map(function (key) {
    var value = options[key];
    if (value === undefined || value === null || value === "" || value === 0) {
      return false;
    }
    if (includes(['url', 'user_agent', 'bg_color', 'hide_selector', 'click_selector', 'highlight', 'highlightbg', 'highlightfg'], key)) {
      value = encodeURIComponent(value);
    }
    if (includes(['force', 'retina', 'full_page', 'disable_js'], key) && !value) {
      return false;
    }
    return key + '=' + value;
  });
  return vals.filter(function (v) {
    return v;
  }).join('&');
};

var validateOptions = function validateOptions(options) {
  var query = void 0,
      ret = void 0,
      token = void 0;
  if (!options) {
    throw new Error('no options object passed');
  }
  if (typeof options.url !== 'string') {
    throw new Error('url should be of type string (something like www.google.com)');
  }
  if (options.url === null) {
    throw new Error('url is required');
  }
  return Object.assign({}, DEFAULT_OPTIONS, options);
};